// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id          Int           @id @default(autoincrement())
  name        String
  email       String        @unique
  password    String
  transactions Transaction[]
  budgets     Budget[]
  categories  Category[]
  wallets     Wallet[]
  tags        Tag[]
  payees       Payee[]
  hiddenCategoryIds HiddenCategory[]
}

model Transaction {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  wallet      Wallet   @relation(fields: [walletId], references: [id])
  walletId    Int
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  Int
  amount      Decimal   @db.Decimal(12, 2)
  date        DateTime
  description String
  tagId        Int?    
  tag          Tag? @relation(fields: [tagId], references: [id])
  payeeId   Int?
  payee     Payee?   @relation(fields: [payeeId], references: [id])
}

model Budget {
  id             Int       @id @default(autoincrement())
  user           User      @relation(fields: [userId], references: [id])
  userId         Int
  category       Category  @relation(fields: [categoryId], references: [id])
  categoryId     Int
  month          Int       // 1-12
  year           Int       // eg. 2025
  amountLimit    Float     
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@unique([userId, categoryId, month, year]) // Prevents duplicate budget entries
}

model Category {
  id        Int          @id @default(autoincrement())
  user      User?         @relation(fields: [userId], references: [id])
  userId    Int?
  name      String
  type      String       // Can be "income", "expense", "saving"
  color     String
  budgets   Budget[]
  transactions Transaction[]
}

model HiddenCategory {
  id        Int          @id @default(autoincrement())
  user      User         @relation(fields: [userId], references: [id])
  userId    Int
  categoryId     Int
}

model Wallet {
  id          Int           @id @default(autoincrement())
  user        User          @relation(fields: [userId], references: [id])
  userId      Int
  name        String
  type        String        // Can be "main", "savings"
  balance     Decimal       @db.Decimal(12, 2)
  transactions Transaction[]
  account  Account?  
}

model Account {
  walletId    Int      @id
  wallet      Wallet   @relation(fields: [walletId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  targetAmt   Decimal?   @db.Decimal(12, 2)
  owner       String?
  investmentType String?   
  contributionLimit Decimal?  @db.Decimal(12, 2)
}

model Tag {
  id          Int           @id @default(autoincrement())
  name        String        
  transactions Transaction[]  
  user      User         @relation(fields: [userId], references: [id])
  userId    Int

  @@unique([name, userId])
}

model Payee {
  id          Int           @id @default(autoincrement())
  name        String       
  transactions Transaction[]  
  user      User       @relation(fields: [userId], references: [id])
  userId    Int

  @@unique([name, userId])
}
